// ==UserScript==
// @name         快速上传
// @namespace    https://github.com/ManagerTea
// @version      2025-08-25
// @description  快速上传立绘差分以及差分名，要求文件需要进行预处理
// @author       ManagerTea
// @match        https://ccfolia.com/rooms/*
// @icon         https://www.google.com/s2/favicons?sz=64&domain=ccfolia.com
// @grant        GM_addStyle
// @grant        GM_setValue
// @grant        GM_getValue
// @grant        GM_registerMenuCommand
// ==/UserScript==

(function() {
    'use strict';

    // 添加自定义样式
    GM_addStyle(`
        .quick-upload-btn {
            display: inline-block;
            margin-right: 10px;
            padding: 8px 16px;
            color: white !important;
            border-radius: 20px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: all 0.3s ease;
            text-decoration: none;
        }

        .quick-upload-btn:hover {

            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        }

        .quick-upload-btn:active {
            transform: translateY(0);
        }

        .upload-status {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 10px 15px;
            background: rgba(0, 0, 0, 0.7);
            border-radius: 5px;
            font-size: 12px;
            color: white;
            z-index: 10000;
            max-width: 300px;
        }

        .settings-panel {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
            z-index: 10001;
            width: 300px;
            display: none;
        }

        .settings-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.5);
            z-index: 10000;
            display: none;
        }

        .settings-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
            border-bottom: 1px solid #eee;
            padding-bottom: 10px;
        }

        .settings-close {
            background: none;
            border: none;
            font-size: 20px;
            cursor: pointer;
        }

        .settings-group {
            margin-bottom: 15px;
        }

        .settings-label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }

        .settings-input {
            width: 100%;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }

        .settings-save {
            background: #4CAF50;
            color: white;
            border: none;
            padding: 10px 15px;
            border-radius: 4px;
            cursor: pointer;
            width: 100%;
        }

        .settings-gear {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background: rgba(0, 0, 0, 0.5);
            color: white;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            z-index: 9999;
            font-size: 20px;
        }
    `);

    const TARGET_BUTTON_SELECTOR = 'button.MuiButton-root.MuiButton-text.MuiButton-textWhite';
    const UPLOAD_BUTTON_SELECTOR = 'button.MuiIconButton-root.MuiIconButton-edgeEnd.MuiIconButton-sizeLarge';
    const IMAGE_CONTAINER_SELECTOR = 'div.sc-joaiei.kHFtPO';
    const FINAL_BUTTON_SELECTOR = 'form div.MuiToolbar-root.MuiToolbar-dense button';
    const EXTRA_BUTTON_SELECTOR = 'body > div.MuiDialog-root.MuiModal-root.css-126xj0f > div.MuiDialog-container.MuiDialog-scrollPaper.css-16u656j > div > div.MuiDialogContent-root.css-1ty026z > form > div:nth-child(2) > div.MuiToolbar-root.MuiToolbar-dense.css-mjywep > button';

    let selectedFileName = '';
    let fileSelectionObserver = null;

    let imageLoadWaitTime = GM_getValue('imageLoadWaitTime', 20000);

    const statusDiv = document.createElement('div');
    statusDiv.className = 'upload-status';
    statusDiv.style.display = 'none';
    document.body.appendChild(statusDiv);

    function createSettingsUI() {
        const settingsGear = document.createElement('div');
        settingsGear.className = 'settings-gear';
        settingsGear.innerHTML = '⚙️';
        settingsGear.title = '打开设置';
        document.body.appendChild(settingsGear);

        const settingsPanel = document.createElement('div');
        settingsPanel.className = 'settings-panel';
        settingsPanel.innerHTML = `
            <div class="settings-header">
                <h3>上传设置</h3>
                <button class="settings-close">&times;</button>
            </div>
            <div class="settings-group">
                <label class="settings-label" for="waitTime">图片加载等待时间(毫秒):</label>
                <input type="number" id="waitTime" class="settings-input" value="${imageLoadWaitTime}" min="5000" max="60000">
            </div>
            <button class="settings-save">保存设置</button>
        `;
        document.body.appendChild(settingsPanel);

        const settingsOverlay = document.createElement('div');
        settingsOverlay.className = 'settings-overlay';
        document.body.appendChild(settingsOverlay);

        settingsGear.addEventListener('click', function() {
            settingsPanel.style.display = 'block';
            settingsOverlay.style.display = 'block';
        });

        settingsPanel.querySelector('.settings-close').addEventListener('click', function() {
            settingsPanel.style.display = 'none';
            settingsOverlay.style.display = 'none';
        });

        settingsOverlay.addEventListener('click', function() {
            settingsPanel.style.display = 'none';
            settingsOverlay.style.display = 'none';
        });

        settingsPanel.querySelector('.settings-save').addEventListener('click', function() {
            const waitTimeInput = document.getElementById('waitTime');
            const newWaitTime = parseInt(waitTimeInput.value, 10);

            if (!isNaN(newWaitTime) && newWaitTime >= 5000 && newWaitTime <= 60000) {
                imageLoadWaitTime = newWaitTime;
                GM_setValue('imageLoadWaitTime', newWaitTime);
                updateStatus('设置已保存');

                setTimeout(() => {
                    settingsPanel.style.display = 'none';
                    settingsOverlay.style.display = 'none';
                }, 1000);
            } else {
                alert('请输入有效的等待时间(5000-60000毫秒)');
            }
        });

        GM_registerMenuCommand("上传设置", function() {
            settingsPanel.style.display = 'block';
            settingsOverlay.style.display = 'block';
        });
    }

    function updateStatus(message) {
        statusDiv.textContent = message;
        statusDiv.style.display = 'block';
        console.log('上传状态:', message);

        setTimeout(() => {
            statusDiv.style.display = 'none';
        }, 3000);
    }

    function createQuickUploadButton() {
        const quickUploadBtn = document.createElement('a');
        quickUploadBtn.className = 'quick-upload-btn';
        quickUploadBtn.textContent = '快速上传';
        quickUploadBtn.href = 'javascript:void(0)';

        return quickUploadBtn;
    }

    function insertQuickUploadButton() {
        // 使用更通用的选择器查找目标按钮
        const targetButtons = document.querySelectorAll(TARGET_BUTTON_SELECTOR);

        for (const targetButton of targetButtons) {
            if (targetButton.textContent.includes('Select for delete') ||
                targetButton.textContent.includes('选择删除') ||
                targetButton.textContent.includes('選択削除')) {

                if (!targetButton.previousElementSibling || !targetButton.previousElementSibling.classList.contains('quick-upload-btn')) {
                    const quickUploadBtn = createQuickUploadButton();
                    targetButton.parentNode.insertBefore(quickUploadBtn, targetButton);

                    console.log('已添加快速上传按钮');

                    quickUploadBtn.addEventListener('click', function() {
                        handleQuickUpload();
                    });

                    break;
                }
            }
        }
    }

    function handleQuickUpload() {
        const uploadButtons = document.querySelectorAll(UPLOAD_BUTTON_SELECTOR);

        for (const uploadButton of uploadButtons) {
            const svg = uploadButton.querySelector('svg[data-testid="AddIcon"]');
            if (svg) {
                uploadButton.click();
                console.log('已点击上传按钮');

                listenForFileSelection();
                break;
            }
        }
    }

    function listenForFileSelection() {
        // 先检查是否已经有文件选择输入框
        checkForFileInputs();

        if (fileSelectionObserver) {
            fileSelectionObserver.disconnect();
        }

        fileSelectionObserver = new MutationObserver(function(mutations) {
            checkForFileInputs();
        });

        fileSelectionObserver.observe(document.body, {
            childList: true,
            subtree: true,
            attributes: true,
            attributeFilter: ['style', 'class']
        });

        setTimeout(() => {
            if (fileSelectionObserver) {
                fileSelectionObserver.disconnect();
                fileSelectionObserver = null;
            }
            if (!selectedFileName) {
                updateStatus('错误: 未检测到文件选择对话框');
            }
        }, 8000);
    }

    function checkForFileInputs() {
        const fileInputs = document.querySelectorAll('input[type="file"]');

        for (const input of fileInputs) {
            const style = window.getComputedStyle(input);
            if (style.display !== 'none' && style.visibility !== 'hidden') {
                console.log('检测到可见的文件选择输入框');

                if (!input.hasAttribute('data-quick-upload-listener')) {
                    input.setAttribute('data-quick-upload-listener', 'true');

                    input.addEventListener('change', function(e) {
                        if (this.files && this.files.length > 0) {
                            selectedFileName = this.files[0].name;
                            console.log('已选择文件:', selectedFileName);
                            updateStatus(`已选择文件: ${selectedFileName}`);

                            if (fileSelectionObserver) {
                                fileSelectionObserver.disconnect();
                                fileSelectionObserver = null;
                            }

                            processUpload();
                        }
                    });
                }
                return;
            }
        }

        const dialogs = document.querySelectorAll('div[role="dialog"], .MuiDialog-root, .MuiModal-root');
        for (const dialog of dialogs) {
            const style = window.getComputedStyle(dialog);
            if (style.display !== 'none' && style.visibility !== 'hidden') {
                const dialogFileInputs = dialog.querySelectorAll('input[type="file"]');
                for (const input of dialogFileInputs) {
                    if (!input.hasAttribute('data-quick-upload-listener')) {
                        input.setAttribute('data-quick-upload-listener', 'true');

                        input.addEventListener('change', function(e) {
                            if (this.files && this.files.length > 0) {
                                selectedFileName = this.files[0].name;
                                console.log('已选择文件:', selectedFileName);
                                updateStatus(`已选择文件: ${selectedFileName}`);

                                if (fileSelectionObserver) {
                                    fileSelectionObserver.disconnect();
                                    fileSelectionObserver = null;
                                }

                                processUpload();
                            }
                        });
                    }
                }
            }
        }
    }

    async function processUpload() {
        if (!selectedFileName) {
            updateStatus('错误: 未选择文件');
            return;
        }

        updateStatus('开始处理文件上传...');

        try {
            await handleCompressionPrompt();

            const img = await waitForImageLoad(selectedFileName);

            if (img) {
                img.click();
                console.log(`已点击图片: ${selectedFileName}`);

                await findAndFillFileName(selectedFileName);

                await clickExtraButton();

                await clickFinalButton();

                updateStatus('文件上传处理完成');
            }
        } catch (error) {
            console.error('处理文件失败:', error);
            updateStatus(`错误: 处理文件失败 - ${error.message}`);
        }
    }

    function handleCompressionPrompt() {
        return new Promise((resolve) => {
            const promptObserver = new MutationObserver((mutations, observer) => {
                const prompts = document.querySelectorAll('div, span, p, button');
                for (const element of prompts) {
                    if (element.textContent.includes('The file size exceeds 1 MB') ||
                        element.textContent.includes('文件大小超过1MB')) {
                        console.log('检测到压缩提示');

                        const buttons = document.querySelectorAll('button');
                        for (const button of buttons) {
                            if (button.textContent.includes('取消') ||
                                button.textContent.includes('Cancel') ||
                                button.textContent.includes('No')) {
                                button.click();
                                console.log('已点击取消按钮');
                                observer.disconnect();
                                resolve();
                                return;
                            }
                        }
                    }
                }
            });

            promptObserver.observe(document.body, {
                childList: true,
                subtree: true,
                characterData: true
            });

            setTimeout(() => {
                promptObserver.disconnect();
                console.log('未检测到压缩提示，继续执行');
                resolve();
            }, 5000);
        });
    }

    function waitForImageLoad(fileName) {
        return new Promise((resolve) => {
            const startTime = Date.now();
            const maxWait = imageLoadWaitTime; 

            function checkImage() {
                const containers = document.querySelectorAll(IMAGE_CONTAINER_SELECTOR);
                for (const container of containers) {
                    const images = container.querySelectorAll('img');
                    for (const img of images) {
                        if (img.complete && (img.alt.includes(fileName) || img.src.includes(fileName) ||
                            fileName.includes(img.alt) || fileName.includes(img.src))) {
                            console.log(`图片已加载: ${fileName}`);
                            resolve(img);
                            return;
                        }
                    }
                }

                if (Date.now() - startTime < maxWait) {
                    setTimeout(checkImage, 500);
                } else {
                    console.error(`图片加载超时: ${fileName}`);
                    updateStatus(`错误: 图片加载超时 - ${fileName}`);
                    resolve(null);
                }
            }

            checkImage();
        });
    }

    function findAndFillFileName(fileName) {
        return new Promise((resolve) => {
            const startTime = Date.now();
            const maxWait = 10000; 

            function checkInput() {
                const inputs = document.querySelectorAll('input[type="text"]');
                let targetInput = null;

                for (const input of inputs) {
                    const hasFacesName = input.name && input.name.startsWith('faces.');
                    const hasCorrectPlaceholder = input.placeholder && input.placeholder.includes('表情名');
                    const hasMuiInputClass = input.className.includes('MuiInputBase-input') &&
                                           input.className.includes('MuiInput-input');

                    const isVisible = input.offsetParent !== null;

                    const isEmptyOrDefault = input.value === '' || input.value === input.placeholder;

                    if (hasFacesName && hasCorrectPlaceholder && hasMuiInputClass && isVisible && isEmptyOrDefault) {
                        targetInput = input;
                        break;
                    }
                }

                if (targetInput) {
                    const fileNameWithoutExt = fileName.replace(/\.[^/.]+$/, "");
                    const newName = `@${fileNameWithoutExt}`;

                    targetInput.value = newName;
                    targetInput.dispatchEvent(new Event('input', { bubbles: true }));
                    targetInput.dispatchEvent(new Event('change', { bubbles: true }));

                    console.log(`已填写文件名: ${newName} 到输入框 ${targetInput.name}`);
                    resolve(true);
                } else if (Date.now() - startTime < maxWait) {
                    setTimeout(checkInput, 300);
                } else {
                    console.error(`未找到目标输入框: ${fileName}`);
                    updateStatus(`错误: 未找到目标输入框 - ${fileName}`);
                    resolve(false);
                }
            }

            checkInput();
        });
    }

    function clickExtraButton() {
        return new Promise((resolve) => {
            const buttons = document.querySelectorAll(EXTRA_BUTTON_SELECTOR);
            for (const button of buttons) {
                // 检查按钮是否可见
                if (button.offsetParent !== null) {
                    button.click();
                    console.log('已点击额外按钮');
                    resolve(true);
                    return;
                }
            }

            console.error('未找到额外按钮');
            updateStatus('错误: 未找到额外按钮');
            resolve(false);
        });
    }

    function clickFinalButton() {
        return new Promise((resolve) => {
            const buttons = document.querySelectorAll(FINAL_BUTTON_SELECTOR);
            for (const button of buttons) {
                // 检查按钮是否可见
                if (button.offsetParent !== null) {
                    button.click();
                    console.log('已点击最终按钮');
                    resolve(true);
                    return;
                }
            }

            const allButtons = document.querySelectorAll('button');
            for (const button of allButtons) {
                if (button.textContent.includes('确定') ||
                    button.textContent.includes('確認') ||
                    button.textContent.includes('OK') ||
                    button.textContent.includes('Save')) {
                    if (button.offsetParent !== null) {
                        button.click();
                        console.log('已通过文本找到并点击最终按钮');
                        resolve(true);
                        return;
                    }
                }
            }

            console.error('未找到最终按钮');
            updateStatus('错误: 未找到最终按钮');
            resolve(false);
        });
    }

    const observer = new MutationObserver(function(mutations) {
        insertQuickUploadButton();
    });

    // 开始观察DOM
    observer.observe(document.body, {
        childList: true,
        subtree: true
    });

    // 初始执行一次
    setTimeout(() => {
        insertQuickUploadButton();
        createSettingsUI();
    }, 1000);
})();
